<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.polidea.rxandroidble.internal.RxBleDeviceTest" tests="633" skipped="0" failures="0" errors="0" timestamp="2023-03-07T00:08:17" hostname="Desk-James" time="0.067">
  <properties/>
  <testcase name="should return the BluetoothDevice name" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.004"/>
  <testcase name="should return the BluetoothDevice address" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="equals() should return true when compared to a different RxBleDevice instance with the same underlying BluetoothDevice" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="hashCode() should return the same value as a different RxBleDevice instance hashCode() with the same underlying BluetoothDevice" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:true {method='0'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.003"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:false {method='0'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:true {method='0'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:false {method='0'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:true {method='1'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:false {method='1'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:true {method='1'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:false {method='1'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:true {method='2'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:false {method='2'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:true {method='2'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="establishConnection() should call RxBleConnection.Connector.prepareConnection() =&gt; autoConnect:false {method='2'}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[0]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.002"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[1]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[2]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[3]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[4]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[5]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[6]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[7]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[8]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[9]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[10]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit only new states from BehaviourRelay&lt;RxBleConnectionState&gt;[11]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit connection and stay subscribed after it was established =&gt; call:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if already connected =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}&quot;" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should emit BleAlreadyConnectedException if there is already one subscriber to .establishConnection() =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should create new connection if previous connection was established and released before second subscriber has subscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=true} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=true, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=0, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=1, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should not emit BleAlreadyConnectedException if there is already was subscriber to .establishConnection() but it unsubscribed =&gt; firstCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false} secondCall:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=0, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=1, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=2, autoConnect=true, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.001"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=0, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=1, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=2, autoConnect=false, suppressIllegalOperationCheck=true}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=0, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=1, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=2, autoConnect=true, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=0, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=1, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should unsubscribe from connection if it was dropped =&gt; call:{method=2, autoConnect=false, suppressIllegalOperationCheck=false}" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should return connection state from BehaviourRelay&lt;RxBleConnectionState&gt;[0]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should return connection state from BehaviourRelay&lt;RxBleConnectionState&gt;[1]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should return connection state from BehaviourRelay&lt;RxBleConnectionState&gt;[2]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should return connection state from BehaviourRelay&lt;RxBleConnectionState&gt;[3]" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <testcase name="should return initial BluetoothDevice on getBluetoothDevice()" classname="com.polidea.rxandroidble.internal.RxBleDeviceTest" time="0.0"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
