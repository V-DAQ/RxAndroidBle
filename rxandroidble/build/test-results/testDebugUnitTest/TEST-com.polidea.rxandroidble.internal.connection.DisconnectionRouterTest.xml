<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" tests="23" skipped="0" failures="0" errors="0" timestamp="2023-03-07T00:08:11" hostname="Desk-James" time="0.197">
  <properties/>
  <testcase name="should emit exception from .as*Observable() when got one from .onDisconnectedException()" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.149"/>
  <testcase name="should emit exception from .asGenericObservable() when got one from .onDisconnectedException() even before subscription" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.001"/>
  <testcase name="should emit exception from .asExactObservable() when got one from .onDisconnectedException() even before subscription" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should emit exception from .as*Observable() when got one from .onGattConnectionStatusException()" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.015"/>
  <testcase name="should emit exception from .asGenericObservable() when got one from .onGattConnectionStatusException() even before subscription" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.001"/>
  <testcase name="should emit exception from .asExactObservable() when got one from .onGattConnectionStatusException() even before subscription" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should emit exception from .as*Observable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF[0]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.01"/>
  <testcase name="should emit exception from .as*Observable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF[1]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.001"/>
  <testcase name="should emit exception from .as*Observable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF[2]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should emit exception from .asGenericObservable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF even before subscription[0]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.002"/>
  <testcase name="should emit exception from .asGenericObservable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF even before subscription[1]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should emit exception from .asGenericObservable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF even before subscription[2]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should emit exception from .asExactObservable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF even before subscription[0]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.002"/>
  <testcase name="should emit exception from .asExactObservable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF even before subscription[1]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should emit exception from .asExactObservable() when adapterStateObservable emits STATE_TURNING_ON/STATE_TURNING_OFF/STATE_OFF even before subscription[2]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.001"/>
  <testcase name="should emit exception from .asGenericObservable() when RxBleAdapterWrapper.isEnabled() returns false" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.002"/>
  <testcase name="should emit exception from .asExactObservable() when RxBleAdapterWrapper.isEnabled() returns false" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.002"/>
  <testcase name="should not emit exception from .asObservable() when adapterStateObservable emits STATE_ON" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should unsubscribe from adapterStateObservable if it emits STATE_OFF/STATE_TURNING_* or if .on*Exception() is called[0]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.001"/>
  <testcase name="should unsubscribe from adapterStateObservable if it emits STATE_OFF/STATE_TURNING_* or if .on*Exception() is called[1]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.001"/>
  <testcase name="should unsubscribe from adapterStateObservable if it emits STATE_OFF/STATE_TURNING_* or if .on*Exception() is called[2]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <testcase name="should unsubscribe from adapterStateObservable if it emits STATE_OFF/STATE_TURNING_* or if .on*Exception() is called[3]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.001"/>
  <testcase name="should unsubscribe from adapterStateObservable if it emits STATE_OFF/STATE_TURNING_* or if .on*Exception() is called[4]" classname="com.polidea.rxandroidble.internal.connection.DisconnectionRouterTest" time="0.0"/>
  <system-out><![CDATA[WARNING: No manifest file found at .\AndroidManifest.xml.Falling back to the Android OS resources only.
To remove this warning, annotate your test class with @Config(manifest=Config.NONE).
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
