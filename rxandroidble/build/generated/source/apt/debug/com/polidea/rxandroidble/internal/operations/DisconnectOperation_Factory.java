// Generated by Dagger (https://google.github.io/dagger).
package com.polidea.rxandroidble.internal.operations;

import android.bluetooth.BluetoothManager;
import bleshadow.dagger.internal.Factory;
import bleshadow.javax.inject.Provider;
import com.polidea.rxandroidble.internal.connection.BluetoothGattProvider;
import com.polidea.rxandroidble.internal.connection.ConnectionStateChangeListener;
import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
import rx.Scheduler;

public final class DisconnectOperation_Factory implements Factory<DisconnectOperation> {
  private final Provider<RxBleGattCallback> rxBleGattCallbackProvider;

  private final Provider<BluetoothGattProvider> bluetoothGattProvider;

  private final Provider<String> macAddressProvider;

  private final Provider<BluetoothManager> bluetoothManagerProvider;

  private final Provider<Scheduler> bluetoothInteractionSchedulerProvider;

  private final Provider<TimeoutConfiguration> timeoutConfigurationProvider;

  private final Provider<ConnectionStateChangeListener> connectionStateChangeListenerProvider;

  public DisconnectOperation_Factory(
      Provider<RxBleGattCallback> rxBleGattCallbackProvider,
      Provider<BluetoothGattProvider> bluetoothGattProvider,
      Provider<String> macAddressProvider,
      Provider<BluetoothManager> bluetoothManagerProvider,
      Provider<Scheduler> bluetoothInteractionSchedulerProvider,
      Provider<TimeoutConfiguration> timeoutConfigurationProvider,
      Provider<ConnectionStateChangeListener> connectionStateChangeListenerProvider) {
    this.rxBleGattCallbackProvider = rxBleGattCallbackProvider;
    this.bluetoothGattProvider = bluetoothGattProvider;
    this.macAddressProvider = macAddressProvider;
    this.bluetoothManagerProvider = bluetoothManagerProvider;
    this.bluetoothInteractionSchedulerProvider = bluetoothInteractionSchedulerProvider;
    this.timeoutConfigurationProvider = timeoutConfigurationProvider;
    this.connectionStateChangeListenerProvider = connectionStateChangeListenerProvider;
  }

  @Override
  public DisconnectOperation get() {
    return new DisconnectOperation(
        rxBleGattCallbackProvider.get(),
        bluetoothGattProvider.get(),
        macAddressProvider.get(),
        bluetoothManagerProvider.get(),
        bluetoothInteractionSchedulerProvider.get(),
        timeoutConfigurationProvider.get(),
        connectionStateChangeListenerProvider.get());
  }

  public static DisconnectOperation_Factory create(
      Provider<RxBleGattCallback> rxBleGattCallbackProvider,
      Provider<BluetoothGattProvider> bluetoothGattProvider,
      Provider<String> macAddressProvider,
      Provider<BluetoothManager> bluetoothManagerProvider,
      Provider<Scheduler> bluetoothInteractionSchedulerProvider,
      Provider<TimeoutConfiguration> timeoutConfigurationProvider,
      Provider<ConnectionStateChangeListener> connectionStateChangeListenerProvider) {
    return new DisconnectOperation_Factory(
        rxBleGattCallbackProvider,
        bluetoothGattProvider,
        macAddressProvider,
        bluetoothManagerProvider,
        bluetoothInteractionSchedulerProvider,
        timeoutConfigurationProvider,
        connectionStateChangeListenerProvider);
  }

  public static DisconnectOperation newDisconnectOperation(
      RxBleGattCallback rxBleGattCallback,
      BluetoothGattProvider bluetoothGattProvider,
      String macAddress,
      BluetoothManager bluetoothManager,
      Scheduler bluetoothInteractionScheduler,
      TimeoutConfiguration timeoutConfiguration,
      ConnectionStateChangeListener connectionStateChangeListener) {
    return new DisconnectOperation(
        rxBleGattCallback,
        bluetoothGattProvider,
        macAddress,
        bluetoothManager,
        bluetoothInteractionScheduler,
        timeoutConfiguration,
        connectionStateChangeListener);
  }
}
