// Generated by Dagger (https://google.github.io/dagger).
package com.polidea.rxandroidble.internal.operations;

import android.bluetooth.BluetoothGatt;
import bleshadow.dagger.internal.Factory;
import bleshadow.javax.inject.Provider;
import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
import java.util.concurrent.TimeUnit;
import rx.Scheduler;

public final class ConnectionPriorityChangeOperation_Factory
    implements Factory<ConnectionPriorityChangeOperation> {
  private final Provider<RxBleGattCallback> rxBleGattCallbackProvider;

  private final Provider<BluetoothGatt> bluetoothGattProvider;

  private final Provider<TimeoutConfiguration> timeoutConfigurationProvider;

  private final Provider<Integer> connectionPriorityProvider;

  private final Provider<Long> operationTimeoutProvider;

  private final Provider<TimeUnit> timeUnitProvider;

  private final Provider<Scheduler> delaySchedulerProvider;

  public ConnectionPriorityChangeOperation_Factory(
      Provider<RxBleGattCallback> rxBleGattCallbackProvider,
      Provider<BluetoothGatt> bluetoothGattProvider,
      Provider<TimeoutConfiguration> timeoutConfigurationProvider,
      Provider<Integer> connectionPriorityProvider,
      Provider<Long> operationTimeoutProvider,
      Provider<TimeUnit> timeUnitProvider,
      Provider<Scheduler> delaySchedulerProvider) {
    this.rxBleGattCallbackProvider = rxBleGattCallbackProvider;
    this.bluetoothGattProvider = bluetoothGattProvider;
    this.timeoutConfigurationProvider = timeoutConfigurationProvider;
    this.connectionPriorityProvider = connectionPriorityProvider;
    this.operationTimeoutProvider = operationTimeoutProvider;
    this.timeUnitProvider = timeUnitProvider;
    this.delaySchedulerProvider = delaySchedulerProvider;
  }

  @Override
  public ConnectionPriorityChangeOperation get() {
    return new ConnectionPriorityChangeOperation(
        rxBleGattCallbackProvider.get(),
        bluetoothGattProvider.get(),
        timeoutConfigurationProvider.get(),
        connectionPriorityProvider.get(),
        operationTimeoutProvider.get(),
        timeUnitProvider.get(),
        delaySchedulerProvider.get());
  }

  public static ConnectionPriorityChangeOperation_Factory create(
      Provider<RxBleGattCallback> rxBleGattCallbackProvider,
      Provider<BluetoothGatt> bluetoothGattProvider,
      Provider<TimeoutConfiguration> timeoutConfigurationProvider,
      Provider<Integer> connectionPriorityProvider,
      Provider<Long> operationTimeoutProvider,
      Provider<TimeUnit> timeUnitProvider,
      Provider<Scheduler> delaySchedulerProvider) {
    return new ConnectionPriorityChangeOperation_Factory(
        rxBleGattCallbackProvider,
        bluetoothGattProvider,
        timeoutConfigurationProvider,
        connectionPriorityProvider,
        operationTimeoutProvider,
        timeUnitProvider,
        delaySchedulerProvider);
  }

  public static ConnectionPriorityChangeOperation newConnectionPriorityChangeOperation(
      RxBleGattCallback rxBleGattCallback,
      BluetoothGatt bluetoothGatt,
      TimeoutConfiguration timeoutConfiguration,
      int connectionPriority,
      long operationTimeout,
      TimeUnit timeUnit,
      Scheduler delayScheduler) {
    return new ConnectionPriorityChangeOperation(
        rxBleGattCallback,
        bluetoothGatt,
        timeoutConfiguration,
        connectionPriority,
        operationTimeout,
        timeUnit,
        delayScheduler);
  }
}
