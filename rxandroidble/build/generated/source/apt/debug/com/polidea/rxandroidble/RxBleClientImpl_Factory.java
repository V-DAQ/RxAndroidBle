// Generated by Dagger (https://google.github.io/dagger).
package com.polidea.rxandroidble;

import bleshadow.dagger.Lazy;
import bleshadow.dagger.internal.DoubleCheck;
import bleshadow.dagger.internal.Factory;
import bleshadow.javax.inject.Provider;
import com.polidea.rxandroidble.internal.RxBleDeviceProvider;
import com.polidea.rxandroidble.internal.scan.RxBleInternalScanResult;
import com.polidea.rxandroidble.internal.scan.ScanPreconditionsVerifier;
import com.polidea.rxandroidble.internal.scan.ScanSetupBuilder;
import com.polidea.rxandroidble.internal.serialization.ClientOperationQueue;
import com.polidea.rxandroidble.internal.util.ClientStateObservable;
import com.polidea.rxandroidble.internal.util.LocationServicesStatus;
import com.polidea.rxandroidble.internal.util.RxBleAdapterWrapper;
import com.polidea.rxandroidble.internal.util.UUIDUtil;
import com.polidea.rxandroidble.scan.ScanResult;
import rx.Observable;
import rx.Scheduler;
import rx.functions.Func1;

public final class RxBleClientImpl_Factory implements Factory<RxBleClientImpl> {
  private final Provider<RxBleAdapterWrapper> rxBleAdapterWrapperProvider;

  private final Provider<ClientOperationQueue> operationQueueProvider;

  private final Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
      adapterStateObservableProvider;

  private final Provider<UUIDUtil> uuidUtilProvider;

  private final Provider<LocationServicesStatus> locationServicesStatusProvider;

  private final Provider<ClientStateObservable> clientStateObservableProvider;

  private final Provider<RxBleDeviceProvider> rxBleDeviceProvider;

  private final Provider<ScanSetupBuilder> scanSetupBuilderProvider;

  private final Provider<ScanPreconditionsVerifier> scanPreconditionVerifierProvider;

  private final Provider<Func1<RxBleInternalScanResult, ScanResult>>
      internalToExternalScanResultMapFunctionProvider;

  private final Provider<Scheduler> bluetoothInteractionSchedulerProvider;

  private final Provider<ClientComponent.ClientComponentFinalizer> clientComponentFinalizerProvider;

  public RxBleClientImpl_Factory(
      Provider<RxBleAdapterWrapper> rxBleAdapterWrapperProvider,
      Provider<ClientOperationQueue> operationQueueProvider,
      Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
          adapterStateObservableProvider,
      Provider<UUIDUtil> uuidUtilProvider,
      Provider<LocationServicesStatus> locationServicesStatusProvider,
      Provider<ClientStateObservable> clientStateObservableProvider,
      Provider<RxBleDeviceProvider> rxBleDeviceProvider,
      Provider<ScanSetupBuilder> scanSetupBuilderProvider,
      Provider<ScanPreconditionsVerifier> scanPreconditionVerifierProvider,
      Provider<Func1<RxBleInternalScanResult, ScanResult>>
          internalToExternalScanResultMapFunctionProvider,
      Provider<Scheduler> bluetoothInteractionSchedulerProvider,
      Provider<ClientComponent.ClientComponentFinalizer> clientComponentFinalizerProvider) {
    this.rxBleAdapterWrapperProvider = rxBleAdapterWrapperProvider;
    this.operationQueueProvider = operationQueueProvider;
    this.adapterStateObservableProvider = adapterStateObservableProvider;
    this.uuidUtilProvider = uuidUtilProvider;
    this.locationServicesStatusProvider = locationServicesStatusProvider;
    this.clientStateObservableProvider = clientStateObservableProvider;
    this.rxBleDeviceProvider = rxBleDeviceProvider;
    this.scanSetupBuilderProvider = scanSetupBuilderProvider;
    this.scanPreconditionVerifierProvider = scanPreconditionVerifierProvider;
    this.internalToExternalScanResultMapFunctionProvider =
        internalToExternalScanResultMapFunctionProvider;
    this.bluetoothInteractionSchedulerProvider = bluetoothInteractionSchedulerProvider;
    this.clientComponentFinalizerProvider = clientComponentFinalizerProvider;
  }

  @Override
  public RxBleClientImpl get() {
    return new RxBleClientImpl(
        rxBleAdapterWrapperProvider.get(),
        operationQueueProvider.get(),
        adapterStateObservableProvider.get(),
        uuidUtilProvider.get(),
        locationServicesStatusProvider.get(),
        DoubleCheck.lazy(clientStateObservableProvider),
        rxBleDeviceProvider.get(),
        scanSetupBuilderProvider.get(),
        scanPreconditionVerifierProvider.get(),
        internalToExternalScanResultMapFunctionProvider.get(),
        bluetoothInteractionSchedulerProvider.get(),
        clientComponentFinalizerProvider.get());
  }

  public static RxBleClientImpl_Factory create(
      Provider<RxBleAdapterWrapper> rxBleAdapterWrapperProvider,
      Provider<ClientOperationQueue> operationQueueProvider,
      Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
          adapterStateObservableProvider,
      Provider<UUIDUtil> uuidUtilProvider,
      Provider<LocationServicesStatus> locationServicesStatusProvider,
      Provider<ClientStateObservable> clientStateObservableProvider,
      Provider<RxBleDeviceProvider> rxBleDeviceProvider,
      Provider<ScanSetupBuilder> scanSetupBuilderProvider,
      Provider<ScanPreconditionsVerifier> scanPreconditionVerifierProvider,
      Provider<Func1<RxBleInternalScanResult, ScanResult>>
          internalToExternalScanResultMapFunctionProvider,
      Provider<Scheduler> bluetoothInteractionSchedulerProvider,
      Provider<ClientComponent.ClientComponentFinalizer> clientComponentFinalizerProvider) {
    return new RxBleClientImpl_Factory(
        rxBleAdapterWrapperProvider,
        operationQueueProvider,
        adapterStateObservableProvider,
        uuidUtilProvider,
        locationServicesStatusProvider,
        clientStateObservableProvider,
        rxBleDeviceProvider,
        scanSetupBuilderProvider,
        scanPreconditionVerifierProvider,
        internalToExternalScanResultMapFunctionProvider,
        bluetoothInteractionSchedulerProvider,
        clientComponentFinalizerProvider);
  }

  public static RxBleClientImpl newRxBleClientImpl(
      RxBleAdapterWrapper rxBleAdapterWrapper,
      ClientOperationQueue operationQueue,
      Observable<RxBleAdapterStateObservable.BleAdapterState> adapterStateObservable,
      UUIDUtil uuidUtil,
      LocationServicesStatus locationServicesStatus,
      Lazy<ClientStateObservable> lazyClientStateObservable,
      RxBleDeviceProvider rxBleDeviceProvider,
      ScanSetupBuilder scanSetupBuilder,
      ScanPreconditionsVerifier scanPreconditionVerifier,
      Func1<RxBleInternalScanResult, ScanResult> internalToExternalScanResultMapFunction,
      Scheduler bluetoothInteractionScheduler,
      ClientComponent.ClientComponentFinalizer clientComponentFinalizer) {
    return new RxBleClientImpl(
        rxBleAdapterWrapper,
        operationQueue,
        adapterStateObservable,
        uuidUtil,
        locationServicesStatus,
        lazyClientStateObservable,
        rxBleDeviceProvider,
        scanSetupBuilder,
        scanPreconditionVerifier,
        internalToExternalScanResultMapFunction,
        bluetoothInteractionScheduler,
        clientComponentFinalizer);
  }
}
