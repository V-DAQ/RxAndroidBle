// Generated by Dagger (https://google.github.io/dagger).
package com.polidea.rxandroidble;

import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import bleshadow.dagger.internal.DelegateFactory;
import bleshadow.dagger.internal.DoubleCheck;
import bleshadow.dagger.internal.Preconditions;
import bleshadow.dagger.internal.SetBuilder;
import bleshadow.javax.inject.Provider;
import com.jakewharton.rxrelay.BehaviorRelay;
import com.polidea.rxandroidble.helpers.LocationServicesOkObservable;
import com.polidea.rxandroidble.helpers.LocationServicesOkObservable_Factory;
import com.polidea.rxandroidble.internal.DeviceComponent;
import com.polidea.rxandroidble.internal.DeviceModule;
import com.polidea.rxandroidble.internal.DeviceModule_ProvideBluetoothDeviceFactory;
import com.polidea.rxandroidble.internal.DeviceModule_ProvideConnectionStateChangeListenerFactory;
import com.polidea.rxandroidble.internal.DeviceModule_ProvideConnectionStateRelayFactory;
import com.polidea.rxandroidble.internal.DeviceModule_ProvideMacAddressFactory;
import com.polidea.rxandroidble.internal.DeviceModule_ProvidesConnectTimeoutConfFactory;
import com.polidea.rxandroidble.internal.DeviceModule_ProvidesDisconnectTimeoutConfFactory;
import com.polidea.rxandroidble.internal.RxBleDeviceImpl_Factory;
import com.polidea.rxandroidble.internal.RxBleDeviceProvider;
import com.polidea.rxandroidble.internal.RxBleDeviceProvider_Factory;
import com.polidea.rxandroidble.internal.cache.DeviceComponentCache;
import com.polidea.rxandroidble.internal.cache.DeviceComponentCache_Factory;
import com.polidea.rxandroidble.internal.connection.BluetoothGattProvider;
import com.polidea.rxandroidble.internal.connection.BluetoothGattProvider_Factory;
import com.polidea.rxandroidble.internal.connection.ConnectionComponent;
import com.polidea.rxandroidble.internal.connection.ConnectionModule;
import com.polidea.rxandroidble.internal.connection.ConnectionModuleBinder_GattWriteMtuOverheadFactory;
import com.polidea.rxandroidble.internal.connection.ConnectionModuleBinder_MinimumMtuFactory;
import com.polidea.rxandroidble.internal.connection.ConnectionModuleBinder_ProvideBluetoothGattFactory;
import com.polidea.rxandroidble.internal.connection.ConnectionModule_ProvideAutoConnectFactory;
import com.polidea.rxandroidble.internal.connection.ConnectionModule_ProvideCharacteristicPropertiesParserFactory;
import com.polidea.rxandroidble.internal.connection.ConnectionModule_ProvideIllegalOperationHandlerFactory;
import com.polidea.rxandroidble.internal.connection.ConnectionModule_ProvidesOperationTimeoutConfFactory;
import com.polidea.rxandroidble.internal.connection.ConnectionStateChangeListener;
import com.polidea.rxandroidble.internal.connection.ConnectionSubscriptionWatcher;
import com.polidea.rxandroidble.internal.connection.ConnectorImpl_Factory;
import com.polidea.rxandroidble.internal.connection.DescriptorWriter_Factory;
import com.polidea.rxandroidble.internal.connection.DisconnectAction_Factory;
import com.polidea.rxandroidble.internal.connection.DisconnectionRouter_Factory;
import com.polidea.rxandroidble.internal.connection.IllegalOperationChecker_Factory;
import com.polidea.rxandroidble.internal.connection.IllegalOperationMessageCreator_Factory;
import com.polidea.rxandroidble.internal.connection.LoggingIllegalOperationHandler_Factory;
import com.polidea.rxandroidble.internal.connection.LongWriteOperationBuilderImpl_Factory;
import com.polidea.rxandroidble.internal.connection.MtuBasedPayloadSizeLimit_Factory;
import com.polidea.rxandroidble.internal.connection.MtuWatcher_Factory;
import com.polidea.rxandroidble.internal.connection.NativeCallbackDispatcher_Factory;
import com.polidea.rxandroidble.internal.connection.NotificationAndIndicationManager_Factory;
import com.polidea.rxandroidble.internal.connection.RxBleConnectionImpl;
import com.polidea.rxandroidble.internal.connection.RxBleConnectionImpl_Factory;
import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
import com.polidea.rxandroidble.internal.connection.RxBleGattCallback_Factory;
import com.polidea.rxandroidble.internal.connection.ServiceDiscoveryManager_Factory;
import com.polidea.rxandroidble.internal.connection.ThrowingIllegalOperationHandler_Factory;
import com.polidea.rxandroidble.internal.operations.ConnectOperation;
import com.polidea.rxandroidble.internal.operations.ConnectOperation_Factory;
import com.polidea.rxandroidble.internal.operations.DisconnectOperation_Factory;
import com.polidea.rxandroidble.internal.operations.OperationsProviderImpl_Factory;
import com.polidea.rxandroidble.internal.operations.ReadRssiOperation_Factory;
import com.polidea.rxandroidble.internal.operations.TimeoutConfiguration;
import com.polidea.rxandroidble.internal.scan.AndroidScanObjectsConverter_Factory;
import com.polidea.rxandroidble.internal.scan.InternalScanResultCreator;
import com.polidea.rxandroidble.internal.scan.InternalScanResultCreator_Factory;
import com.polidea.rxandroidble.internal.scan.InternalToExternalScanResultConverter_Factory;
import com.polidea.rxandroidble.internal.scan.ScanPreconditionsVerifierApi18_Factory;
import com.polidea.rxandroidble.internal.scan.ScanPreconditionsVerifierApi24_Factory;
import com.polidea.rxandroidble.internal.scan.ScanSettingsEmulator_Factory;
import com.polidea.rxandroidble.internal.scan.ScanSetupBuilder;
import com.polidea.rxandroidble.internal.scan.ScanSetupBuilderImplApi18_Factory;
import com.polidea.rxandroidble.internal.scan.ScanSetupBuilderImplApi21_Factory;
import com.polidea.rxandroidble.internal.scan.ScanSetupBuilderImplApi23_Factory;
import com.polidea.rxandroidble.internal.serialization.ClientOperationQueue;
import com.polidea.rxandroidble.internal.serialization.ClientOperationQueueImpl_Factory;
import com.polidea.rxandroidble.internal.serialization.ConnectionOperationQueueImpl;
import com.polidea.rxandroidble.internal.serialization.ConnectionOperationQueueImpl_Factory;
import com.polidea.rxandroidble.internal.util.BleConnectionCompat;
import com.polidea.rxandroidble.internal.util.CheckerLocationPermission_Factory;
import com.polidea.rxandroidble.internal.util.CheckerLocationProvider_Factory;
import com.polidea.rxandroidble.internal.util.ClientStateObservable_Factory;
import com.polidea.rxandroidble.internal.util.LocationServicesOkObservableApi23_Factory;
import com.polidea.rxandroidble.internal.util.LocationServicesStatusApi18_Factory;
import com.polidea.rxandroidble.internal.util.LocationServicesStatusApi23_Factory;
import com.polidea.rxandroidble.internal.util.RxBleAdapterWrapper;
import com.polidea.rxandroidble.internal.util.RxBleAdapterWrapper_Factory;
import com.polidea.rxandroidble.internal.util.RxBleServicesLogger_Factory;
import com.polidea.rxandroidble.internal.util.UUIDUtil_Factory;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import rx.Observable;
import rx.Scheduler;

public final class DaggerClientComponent implements ClientComponent {
  private ClientComponent.ClientModule clientModule;

  private ClientComponent_ClientModule_ProvideApplicationContextFactory
      provideApplicationContextProvider;

  private ClientComponent_ClientModule_ProvideContentResolverFactory provideContentResolverProvider;

  private ClientComponent_ClientModule_ProvideLocationManagerFactory provideLocationManagerProvider;

  private CheckerLocationProvider_Factory checkerLocationProvider;

  private CheckerLocationPermission_Factory checkerLocationPermissionProvider;

  private ClientComponent_ClientModule_ProvideTargetSdkFactory provideTargetSdkProvider;

  private ClientComponent_ClientModule_ProvideIsAndroidWearFactory provideIsAndroidWearProvider;

  private LocationServicesStatusApi23_Factory locationServicesStatusApi23Provider;

  private ClientComponent_ClientModule_ProvideLocationServicesStatusFactory
      provideLocationServicesStatusProvider;

  private LocationServicesOkObservableApi23_Factory locationServicesOkObservableApi23Provider;

  private RxBleAdapterWrapper_Factory rxBleAdapterWrapperProvider;

  private Provider<ExecutorService> provideBluetoothInteractionExecutorServiceProvider;

  private Provider<Scheduler> provideBluetoothInteractionSchedulerProvider;

  private ClientOperationQueueImpl_Factory clientOperationQueueImplProvider;

  private Provider<ClientOperationQueue> bindClientOperationQueueProvider;

  private RxBleAdapterStateObservable_Factory rxBleAdapterStateObservableProvider;

  private ClientComponent_ClientModule_ProvideLocationServicesOkObservableFactory
      provideLocationServicesOkObservableProvider;

  private ClientStateObservable_Factory clientStateObservableProvider;

  private Provider<DeviceComponentCache> deviceComponentCacheProvider;

  private Provider<DeviceComponent.Builder> deviceComponentBuilderProvider;

  private Provider<RxBleDeviceProvider> rxBleDeviceProvider;

  private Provider<InternalScanResultCreator> internalScanResultCreatorProvider;

  private ScanSettingsEmulator_Factory scanSettingsEmulatorProvider;

  private ScanSetupBuilderImplApi18_Factory scanSetupBuilderImplApi18Provider;

  private AndroidScanObjectsConverter_Factory androidScanObjectsConverterProvider;

  private ScanSetupBuilderImplApi21_Factory scanSetupBuilderImplApi21Provider;

  private ScanSetupBuilderImplApi23_Factory scanSetupBuilderImplApi23Provider;

  private Provider<ScanSetupBuilder> provideScanSetupProvider;

  private ScanPreconditionsVerifierApi18_Factory scanPreconditionsVerifierApi18Provider;

  private ScanPreconditionsVerifierApi24_Factory scanPreconditionsVerifierApi24Provider;

  private ClientComponent_ClientModule_ProvideScanPreconditionVerifierFactory
      provideScanPreconditionVerifierProvider;

  private InternalToExternalScanResultConverter_Factory
      internalToExternalScanResultConverterProvider;

  private Provider<ExecutorService> provideBluetoothCallbacksExecutorServiceProvider;

  private Provider<ExecutorService> provideConnectionQueueExecutorServiceProvider;

  private ClientComponent_ClientModule_ProvideFinalizationCloseableFactory
      provideFinalizationCloseableProvider;

  private RxBleClientImpl_Factory rxBleClientImplProvider;

  private Provider<RxBleClient> bindRxBleClientProvider;

  private Provider<Scheduler> provideBluetoothCallbacksSchedulerProvider;

  private ClientComponent_ClientModule_ProvideBluetoothManagerFactory
      provideBluetoothManagerProvider;

  private DaggerClientComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Observable<Boolean> getNamedObservableOfBoolean() {
    return ClientComponent_ClientModule_ProvideLocationServicesOkObservableFactory
        .proxyProvideLocationServicesOkObservable(
            clientModule,
            ClientComponent.ClientModule.provideDeviceSdk(),
            locationServicesOkObservableApi23Provider);
  }

  private RxBleAdapterWrapper getRxBleAdapterWrapper() {
    return new RxBleAdapterWrapper(ClientComponent.ClientModule.provideBluetoothAdapter());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.clientModule = builder.clientModule;
    this.provideApplicationContextProvider =
        ClientComponent_ClientModule_ProvideApplicationContextFactory.create(builder.clientModule);
    this.provideContentResolverProvider =
        ClientComponent_ClientModule_ProvideContentResolverFactory.create(builder.clientModule);
    this.provideLocationManagerProvider =
        ClientComponent_ClientModule_ProvideLocationManagerFactory.create(builder.clientModule);
    this.checkerLocationProvider =
        CheckerLocationProvider_Factory.create(
            provideContentResolverProvider, provideLocationManagerProvider);
    this.checkerLocationPermissionProvider =
        CheckerLocationPermission_Factory.create(provideApplicationContextProvider);
    this.provideTargetSdkProvider =
        ClientComponent_ClientModule_ProvideTargetSdkFactory.create(builder.clientModule);
    this.provideIsAndroidWearProvider =
        ClientComponent_ClientModule_ProvideIsAndroidWearFactory.create(
            builder.clientModule, ClientComponent_ClientModule_ProvideDeviceSdkFactory.create());
    this.locationServicesStatusApi23Provider =
        LocationServicesStatusApi23_Factory.create(
            checkerLocationProvider,
            checkerLocationPermissionProvider,
            provideTargetSdkProvider,
            provideIsAndroidWearProvider);
    this.provideLocationServicesStatusProvider =
        ClientComponent_ClientModule_ProvideLocationServicesStatusFactory.create(
            builder.clientModule,
            ClientComponent_ClientModule_ProvideDeviceSdkFactory.create(),
            LocationServicesStatusApi18_Factory.create(),
            locationServicesStatusApi23Provider);
    this.locationServicesOkObservableApi23Provider =
        LocationServicesOkObservableApi23_Factory.create(
            provideApplicationContextProvider, provideLocationServicesStatusProvider);
    this.rxBleAdapterWrapperProvider =
        RxBleAdapterWrapper_Factory.create(
            ClientComponent_ClientModule_ProvideBluetoothAdapterFactory.create());
    this.provideBluetoothInteractionExecutorServiceProvider =
        DoubleCheck.provider(
            ClientComponent_ClientModule_ProvideBluetoothInteractionExecutorServiceFactory
                .create());
    this.provideBluetoothInteractionSchedulerProvider =
        DoubleCheck.provider(
            ClientComponent_ClientModule_ProvideBluetoothInteractionSchedulerFactory.create(
                provideBluetoothInteractionExecutorServiceProvider));
    this.clientOperationQueueImplProvider =
        ClientOperationQueueImpl_Factory.create(provideBluetoothInteractionSchedulerProvider);
    this.bindClientOperationQueueProvider =
        DoubleCheck.provider((Provider) clientOperationQueueImplProvider);
    this.rxBleAdapterStateObservableProvider =
        RxBleAdapterStateObservable_Factory.create(provideApplicationContextProvider);
    this.provideLocationServicesOkObservableProvider =
        ClientComponent_ClientModule_ProvideLocationServicesOkObservableFactory.create(
            builder.clientModule,
            ClientComponent_ClientModule_ProvideDeviceSdkFactory.create(),
            locationServicesOkObservableApi23Provider);
    this.clientStateObservableProvider =
        ClientStateObservable_Factory.create(
            rxBleAdapterWrapperProvider,
            (Provider) rxBleAdapterStateObservableProvider,
            provideLocationServicesOkObservableProvider,
            provideLocationServicesStatusProvider,
            ClientComponent_ClientModule_ProvideComputationSchedulerFactory.create());
    this.deviceComponentCacheProvider = DoubleCheck.provider(DeviceComponentCache_Factory.create());
    this.deviceComponentBuilderProvider =
        new Provider<DeviceComponent.Builder>() {
          @Override
          public DeviceComponent.Builder get() {
            return new DeviceComponentBuilder();
          }
        };
    this.rxBleDeviceProvider =
        DoubleCheck.provider(
            RxBleDeviceProvider_Factory.create(
                deviceComponentCacheProvider, deviceComponentBuilderProvider));
    this.internalScanResultCreatorProvider =
        DoubleCheck.provider(InternalScanResultCreator_Factory.create(UUIDUtil_Factory.create()));
    this.scanSettingsEmulatorProvider =
        ScanSettingsEmulator_Factory.create(
            ClientComponent_ClientModule_ProvideComputationSchedulerFactory.create());
    this.scanSetupBuilderImplApi18Provider =
        ScanSetupBuilderImplApi18_Factory.create(
            rxBleAdapterWrapperProvider,
            internalScanResultCreatorProvider,
            scanSettingsEmulatorProvider);
    this.androidScanObjectsConverterProvider =
        AndroidScanObjectsConverter_Factory.create(
            ClientComponent_ClientModule_ProvideDeviceSdkFactory.create());
    this.scanSetupBuilderImplApi21Provider =
        ScanSetupBuilderImplApi21_Factory.create(
            rxBleAdapterWrapperProvider,
            internalScanResultCreatorProvider,
            scanSettingsEmulatorProvider,
            androidScanObjectsConverterProvider);
    this.scanSetupBuilderImplApi23Provider =
        ScanSetupBuilderImplApi23_Factory.create(
            rxBleAdapterWrapperProvider,
            internalScanResultCreatorProvider,
            androidScanObjectsConverterProvider);
    this.provideScanSetupProvider =
        DoubleCheck.provider(
            ClientComponent_ClientModule_ProvideScanSetupProviderFactory.create(
                ClientComponent_ClientModule_ProvideDeviceSdkFactory.create(),
                scanSetupBuilderImplApi18Provider,
                scanSetupBuilderImplApi21Provider,
                scanSetupBuilderImplApi23Provider));
    this.scanPreconditionsVerifierApi18Provider =
        ScanPreconditionsVerifierApi18_Factory.create(
            rxBleAdapterWrapperProvider, provideLocationServicesStatusProvider);
    this.scanPreconditionsVerifierApi24Provider =
        ScanPreconditionsVerifierApi24_Factory.create(
            scanPreconditionsVerifierApi18Provider,
            ClientComponent_ClientModule_ProvideComputationSchedulerFactory.create());
    this.provideScanPreconditionVerifierProvider =
        ClientComponent_ClientModule_ProvideScanPreconditionVerifierFactory.create(
            ClientComponent_ClientModule_ProvideDeviceSdkFactory.create(),
            scanPreconditionsVerifierApi18Provider,
            scanPreconditionsVerifierApi24Provider);
    this.internalToExternalScanResultConverterProvider =
        InternalToExternalScanResultConverter_Factory.create(rxBleDeviceProvider);
    this.provideBluetoothCallbacksExecutorServiceProvider =
        DoubleCheck.provider(
            ClientComponent_ClientModule_ProvideBluetoothCallbacksExecutorServiceFactory.create());
    this.provideConnectionQueueExecutorServiceProvider =
        DoubleCheck.provider(
            ClientComponent_ClientModule_ProvideConnectionQueueExecutorServiceFactory.create());
    this.provideFinalizationCloseableProvider =
        ClientComponent_ClientModule_ProvideFinalizationCloseableFactory.create(
            provideBluetoothInteractionExecutorServiceProvider,
            provideBluetoothCallbacksExecutorServiceProvider,
            provideConnectionQueueExecutorServiceProvider);
    this.rxBleClientImplProvider =
        RxBleClientImpl_Factory.create(
            rxBleAdapterWrapperProvider,
            bindClientOperationQueueProvider,
            (Provider) rxBleAdapterStateObservableProvider,
            UUIDUtil_Factory.create(),
            provideLocationServicesStatusProvider,
            clientStateObservableProvider,
            rxBleDeviceProvider,
            provideScanSetupProvider,
            provideScanPreconditionVerifierProvider,
            (Provider) internalToExternalScanResultConverterProvider,
            provideBluetoothInteractionSchedulerProvider,
            provideFinalizationCloseableProvider);
    this.bindRxBleClientProvider = DoubleCheck.provider((Provider) rxBleClientImplProvider);
    this.provideBluetoothCallbacksSchedulerProvider =
        DoubleCheck.provider(
            ClientComponent_ClientModule_ProvideBluetoothCallbacksSchedulerFactory.create(
                provideBluetoothCallbacksExecutorServiceProvider));
    this.provideBluetoothManagerProvider =
        ClientComponent_ClientModule_ProvideBluetoothManagerFactory.create(builder.clientModule);
  }

  @Override
  public LocationServicesOkObservable locationServicesOkObservable() {
    return LocationServicesOkObservable_Factory.newLocationServicesOkObservable(
        getNamedObservableOfBoolean());
  }

  @Override
  public RxBleClient rxBleClient() {
    return bindRxBleClientProvider.get();
  }

  public static final class Builder {
    private ClientComponent.ClientModule clientModule;

    private Builder() {}

    public ClientComponent build() {
      if (clientModule == null) {
        throw new IllegalStateException(
            ClientComponent.ClientModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerClientComponent(this);
    }

    public Builder clientModule(ClientComponent.ClientModule clientModule) {
      this.clientModule = Preconditions.checkNotNull(clientModule);
      return this;
    }
  }

  private final class DeviceComponentBuilder implements DeviceComponent.Builder {
    private DeviceModule deviceModule;

    @Override
    public DeviceComponent build() {
      if (deviceModule == null) {
        throw new IllegalStateException(DeviceModule.class.getCanonicalName() + " must be set");
      }
      return new DeviceComponentImpl(this);
    }

    @Override
    public DeviceComponentBuilder deviceModule(DeviceModule module) {
      this.deviceModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class DeviceComponentImpl implements DeviceComponent {
    private DeviceModule deviceModule;

    private DeviceModule_ProvideBluetoothDeviceFactory provideBluetoothDeviceProvider;

    private Provider<ConnectionComponent.Builder> connectionComponentBuilderProvider;

    private ConnectorImpl_Factory connectorImplProvider;

    private Provider<BehaviorRelay<RxBleConnection.RxBleConnectionState>>
        provideConnectionStateRelayProvider;

    @SuppressWarnings("rawtypes")
    private Provider rxBleDeviceImplProvider;

    private DeviceModule_ProvideMacAddressFactory provideMacAddressProvider;

    private Provider<ConnectionStateChangeListener> provideConnectionStateChangeListenerProvider;

    private DeviceModule_ProvidesDisconnectTimeoutConfFactory providesDisconnectTimeoutConfProvider;

    private DeviceComponentImpl(DeviceComponentBuilder builder) {
      initialize(builder);
    }

    private BluetoothDevice getBluetoothDevice() {
      return DeviceModule_ProvideBluetoothDeviceFactory.proxyProvideBluetoothDevice(
          deviceModule, DaggerClientComponent.this.getRxBleAdapterWrapper());
    }

    private TimeoutConfiguration getNamedTimeoutConfiguration() {
      return DeviceModule_ProvidesConnectTimeoutConfFactory.proxyProvidesConnectTimeoutConf(
          ClientComponent_ClientModule_ProvideComputationSchedulerFactory
              .proxyProvideComputationScheduler());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DeviceComponentBuilder builder) {
      this.provideBluetoothDeviceProvider =
          DeviceModule_ProvideBluetoothDeviceFactory.create(
              builder.deviceModule, DaggerClientComponent.this.rxBleAdapterWrapperProvider);
      this.connectionComponentBuilderProvider =
          new Provider<ConnectionComponent.Builder>() {
            @Override
            public ConnectionComponent.Builder get() {
              return new ConnectionComponentBuilder();
            }
          };
      this.connectorImplProvider =
          ConnectorImpl_Factory.create(
              DaggerClientComponent.this.bindClientOperationQueueProvider,
              connectionComponentBuilderProvider,
              DaggerClientComponent.this.provideBluetoothCallbacksSchedulerProvider);
      this.provideConnectionStateRelayProvider =
          DoubleCheck.provider(DeviceModule_ProvideConnectionStateRelayFactory.create());
      this.rxBleDeviceImplProvider =
          DoubleCheck.provider(
              RxBleDeviceImpl_Factory.create(
                  provideBluetoothDeviceProvider,
                  (Provider) connectorImplProvider,
                  provideConnectionStateRelayProvider));
      this.deviceModule = builder.deviceModule;
      this.provideMacAddressProvider =
          DeviceModule_ProvideMacAddressFactory.create(builder.deviceModule);
      this.provideConnectionStateChangeListenerProvider =
          DoubleCheck.provider(
              DeviceModule_ProvideConnectionStateChangeListenerFactory.create(
                  provideConnectionStateRelayProvider));
      this.providesDisconnectTimeoutConfProvider =
          DeviceModule_ProvidesDisconnectTimeoutConfFactory.create(
              ClientComponent_ClientModule_ProvideComputationSchedulerFactory.create());
    }

    @Override
    public RxBleDevice provideDevice() {
      return (RxBleDevice) rxBleDeviceImplProvider.get();
    }

    private final class ConnectionComponentBuilder implements ConnectionComponent.Builder {
      private ConnectionModule connectionModule;

      @Override
      public ConnectionComponent build() {
        if (connectionModule == null) {
          throw new IllegalStateException(
              ConnectionModule.class.getCanonicalName() + " must be set");
        }
        return new ConnectionComponentImpl(this);
      }

      @Override
      public ConnectionComponentBuilder connectionModule(ConnectionModule connectionModule) {
        this.connectionModule = Preconditions.checkNotNull(connectionModule);
        return this;
      }
    }

    private final class ConnectionComponentImpl implements ConnectionComponent {
      private Provider<BluetoothGattProvider> bluetoothGattProvider;

      @SuppressWarnings("rawtypes")
      private Provider disconnectionRouterProvider;

      private Provider<RxBleGattCallback> rxBleGattCallbackProvider;

      private Provider<Boolean> provideAutoConnectProvider;

      private Provider<ConnectionOperationQueueImpl> connectionOperationQueueImplProvider;

      private Provider<BluetoothGatt> provideBluetoothGattProvider;

      private ConnectionModule_ProvideCharacteristicPropertiesParserFactory
          provideCharacteristicPropertiesParserProvider;

      private RxBleServicesLogger_Factory rxBleServicesLoggerProvider;

      private ConnectionModule_ProvidesOperationTimeoutConfFactory
          providesOperationTimeoutConfProvider;

      private ReadRssiOperation_Factory readRssiOperationProvider;

      private OperationsProviderImpl_Factory operationsProviderImplProvider;

      @SuppressWarnings("rawtypes")
      private Provider serviceDiscoveryManagerProvider;

      @SuppressWarnings("rawtypes")
      private Provider descriptorWriterProvider;

      @SuppressWarnings("rawtypes")
      private Provider notificationAndIndicationManagerProvider;

      @SuppressWarnings("rawtypes")
      private Provider mtuWatcherProvider;

      private Provider<RxBleConnectionImpl> rxBleConnectionImplProvider;

      @SuppressWarnings("rawtypes")
      private Provider mtuBasedPayloadSizeLimitProvider;

      private LongWriteOperationBuilderImpl_Factory longWriteOperationBuilderImplProvider;

      private IllegalOperationMessageCreator_Factory illegalOperationMessageCreatorProvider;

      private LoggingIllegalOperationHandler_Factory loggingIllegalOperationHandlerProvider;

      private ThrowingIllegalOperationHandler_Factory throwingIllegalOperationHandlerProvider;

      private ConnectionModule_ProvideIllegalOperationHandlerFactory
          provideIllegalOperationHandlerProvider;

      private IllegalOperationChecker_Factory illegalOperationCheckerProvider;

      private DisconnectOperation_Factory disconnectOperationProvider;

      @SuppressWarnings("rawtypes")
      private Provider disconnectActionProvider;

      private ConnectionComponentImpl(ConnectionComponentBuilder builder) {
        initialize(builder);
      }

      private BleConnectionCompat getBleConnectionCompat() {
        return new BleConnectionCompat(
            ClientComponent_ClientModule_ProvideApplicationContextFactory
                .proxyProvideApplicationContext(DaggerClientComponent.this.clientModule));
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ConnectionComponentBuilder builder) {
        this.bluetoothGattProvider = DoubleCheck.provider(BluetoothGattProvider_Factory.create());
        this.disconnectionRouterProvider =
            DoubleCheck.provider(
                DisconnectionRouter_Factory.create(
                    DeviceComponentImpl.this.provideMacAddressProvider,
                    DaggerClientComponent.this.rxBleAdapterWrapperProvider,
                    (Provider) DaggerClientComponent.this.rxBleAdapterStateObservableProvider));
        this.rxBleGattCallbackProvider =
            DoubleCheck.provider(
                RxBleGattCallback_Factory.create(
                    DaggerClientComponent.this.provideBluetoothCallbacksSchedulerProvider,
                    bluetoothGattProvider,
                    disconnectionRouterProvider,
                    NativeCallbackDispatcher_Factory.create()));
        this.provideAutoConnectProvider =
            DoubleCheck.provider(
                ConnectionModule_ProvideAutoConnectFactory.create(builder.connectionModule));
        this.connectionOperationQueueImplProvider =
            DoubleCheck.provider(
                ConnectionOperationQueueImpl_Factory.create(
                    DeviceComponentImpl.this.provideMacAddressProvider,
                    disconnectionRouterProvider,
                    DaggerClientComponent.this.provideConnectionQueueExecutorServiceProvider,
                    DaggerClientComponent.this.provideBluetoothInteractionSchedulerProvider));
        this.provideBluetoothGattProvider =
            DoubleCheck.provider(
                ConnectionModuleBinder_ProvideBluetoothGattFactory.create(bluetoothGattProvider));
        this.provideCharacteristicPropertiesParserProvider =
            ConnectionModule_ProvideCharacteristicPropertiesParserFactory.create(
                builder.connectionModule);
        this.rxBleServicesLoggerProvider =
            RxBleServicesLogger_Factory.create(provideCharacteristicPropertiesParserProvider);
        this.providesOperationTimeoutConfProvider =
            ConnectionModule_ProvidesOperationTimeoutConfFactory.create(
                builder.connectionModule,
                ClientComponent_ClientModule_ProvideComputationSchedulerFactory.create());
        this.readRssiOperationProvider =
            ReadRssiOperation_Factory.create(
                rxBleGattCallbackProvider,
                provideBluetoothGattProvider,
                providesOperationTimeoutConfProvider);
        this.operationsProviderImplProvider =
            OperationsProviderImpl_Factory.create(
                rxBleGattCallbackProvider,
                provideBluetoothGattProvider,
                rxBleServicesLoggerProvider,
                providesOperationTimeoutConfProvider,
                DaggerClientComponent.this.provideBluetoothInteractionSchedulerProvider,
                ClientComponent_ClientModule_ProvideComputationSchedulerFactory.create(),
                readRssiOperationProvider);
        this.serviceDiscoveryManagerProvider =
            DoubleCheck.provider(
                ServiceDiscoveryManager_Factory.create(
                    (Provider) connectionOperationQueueImplProvider,
                    provideBluetoothGattProvider,
                    (Provider) operationsProviderImplProvider));
        this.descriptorWriterProvider =
            DoubleCheck.provider(
                DescriptorWriter_Factory.create(
                    (Provider) connectionOperationQueueImplProvider,
                    (Provider) operationsProviderImplProvider));
        this.notificationAndIndicationManagerProvider =
            DoubleCheck.provider(
                NotificationAndIndicationManager_Factory.create(
                    ClientComponent_ClientModule_ProvideEnableNotificationValueFactory.create(),
                    ClientComponent_ClientModule_ProvideEnableIndicationValueFactory.create(),
                    ClientComponent_ClientModule_ProvideDisableNotificationValueFactory.create(),
                    provideBluetoothGattProvider,
                    rxBleGattCallbackProvider,
                    descriptorWriterProvider));
        this.mtuWatcherProvider =
            DoubleCheck.provider(
                MtuWatcher_Factory.create(
                    rxBleGattCallbackProvider, ConnectionModuleBinder_MinimumMtuFactory.create()));
        this.rxBleConnectionImplProvider = new DelegateFactory<>();
        this.mtuBasedPayloadSizeLimitProvider =
            DoubleCheck.provider(
                MtuBasedPayloadSizeLimit_Factory.create(
                    (Provider) rxBleConnectionImplProvider,
                    ConnectionModuleBinder_GattWriteMtuOverheadFactory.create()));
        this.longWriteOperationBuilderImplProvider =
            LongWriteOperationBuilderImpl_Factory.create(
                (Provider) connectionOperationQueueImplProvider,
                mtuBasedPayloadSizeLimitProvider,
                (Provider) rxBleConnectionImplProvider,
                (Provider) operationsProviderImplProvider);
        this.illegalOperationMessageCreatorProvider =
            IllegalOperationMessageCreator_Factory.create(
                provideCharacteristicPropertiesParserProvider);
        this.loggingIllegalOperationHandlerProvider =
            LoggingIllegalOperationHandler_Factory.create(illegalOperationMessageCreatorProvider);
        this.throwingIllegalOperationHandlerProvider =
            ThrowingIllegalOperationHandler_Factory.create(illegalOperationMessageCreatorProvider);
        this.provideIllegalOperationHandlerProvider =
            ConnectionModule_ProvideIllegalOperationHandlerFactory.create(
                builder.connectionModule,
                loggingIllegalOperationHandlerProvider,
                throwingIllegalOperationHandlerProvider);
        this.illegalOperationCheckerProvider =
            IllegalOperationChecker_Factory.create(provideIllegalOperationHandlerProvider);
        DelegateFactory rxBleConnectionImplProviderDelegate =
            (DelegateFactory) rxBleConnectionImplProvider;
        this.rxBleConnectionImplProvider =
            DoubleCheck.provider(
                RxBleConnectionImpl_Factory.create(
                    (Provider) connectionOperationQueueImplProvider,
                    rxBleGattCallbackProvider,
                    provideBluetoothGattProvider,
                    serviceDiscoveryManagerProvider,
                    notificationAndIndicationManagerProvider,
                    mtuWatcherProvider,
                    descriptorWriterProvider,
                    (Provider) operationsProviderImplProvider,
                    (Provider) longWriteOperationBuilderImplProvider,
                    DaggerClientComponent.this.provideBluetoothInteractionSchedulerProvider,
                    illegalOperationCheckerProvider));
        rxBleConnectionImplProviderDelegate.setDelegatedProvider(rxBleConnectionImplProvider);
        this.disconnectOperationProvider =
            DisconnectOperation_Factory.create(
                rxBleGattCallbackProvider,
                bluetoothGattProvider,
                DeviceComponentImpl.this.provideMacAddressProvider,
                DaggerClientComponent.this.provideBluetoothManagerProvider,
                DaggerClientComponent.this.provideBluetoothInteractionSchedulerProvider,
                DeviceComponentImpl.this.providesDisconnectTimeoutConfProvider,
                DeviceComponentImpl.this.provideConnectionStateChangeListenerProvider);
        this.disconnectActionProvider =
            DoubleCheck.provider(
                DisconnectAction_Factory.create(
                    DaggerClientComponent.this.bindClientOperationQueueProvider,
                    disconnectOperationProvider));
      }

      @Override
      public ConnectOperation connectOperation() {
        return ConnectOperation_Factory.newConnectOperation(
            DeviceComponentImpl.this.getBluetoothDevice(),
            getBleConnectionCompat(),
            rxBleGattCallbackProvider.get(),
            bluetoothGattProvider.get(),
            DeviceComponentImpl.this.getNamedTimeoutConfiguration(),
            provideAutoConnectProvider.get(),
            DeviceComponentImpl.this.provideConnectionStateChangeListenerProvider.get());
      }

      @Override
      public RxBleConnection rxBleConnection() {
        return rxBleConnectionImplProvider.get();
      }

      @Override
      public RxBleGattCallback gattCallback() {
        return rxBleGattCallbackProvider.get();
      }

      @Override
      public Set<ConnectionSubscriptionWatcher> connectionSubscriptionWatchers() {
        return SetBuilder.<ConnectionSubscriptionWatcher>newSetBuilder(3)
            .add((ConnectionSubscriptionWatcher) mtuWatcherProvider.get())
            .add((ConnectionSubscriptionWatcher) disconnectActionProvider.get())
            .add(connectionOperationQueueImplProvider.get())
            .build();
      }
    }
  }
}
