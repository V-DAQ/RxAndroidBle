// Generated by Dagger (https://google.github.io/dagger).
package com.polidea.rxandroidble.internal.util;

import bleshadow.dagger.internal.Factory;
import bleshadow.javax.inject.Provider;
import com.polidea.rxandroidble.RxBleAdapterStateObservable;
import rx.Observable;
import rx.Scheduler;

public final class ClientStateObservable_Factory implements Factory<ClientStateObservable> {
  private final Provider<RxBleAdapterWrapper> rxBleAdapterWrapperProvider;

  private final Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
      bleAdapterStateObservableProvider;

  private final Provider<Observable<Boolean>> locationServicesOkObservableProvider;

  private final Provider<LocationServicesStatus> locationServicesStatusProvider;

  private final Provider<Scheduler> timerSchedulerProvider;

  public ClientStateObservable_Factory(
      Provider<RxBleAdapterWrapper> rxBleAdapterWrapperProvider,
      Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
          bleAdapterStateObservableProvider,
      Provider<Observable<Boolean>> locationServicesOkObservableProvider,
      Provider<LocationServicesStatus> locationServicesStatusProvider,
      Provider<Scheduler> timerSchedulerProvider) {
    this.rxBleAdapterWrapperProvider = rxBleAdapterWrapperProvider;
    this.bleAdapterStateObservableProvider = bleAdapterStateObservableProvider;
    this.locationServicesOkObservableProvider = locationServicesOkObservableProvider;
    this.locationServicesStatusProvider = locationServicesStatusProvider;
    this.timerSchedulerProvider = timerSchedulerProvider;
  }

  @Override
  public ClientStateObservable get() {
    return new ClientStateObservable(
        rxBleAdapterWrapperProvider.get(),
        bleAdapterStateObservableProvider.get(),
        locationServicesOkObservableProvider.get(),
        locationServicesStatusProvider.get(),
        timerSchedulerProvider.get());
  }

  public static ClientStateObservable_Factory create(
      Provider<RxBleAdapterWrapper> rxBleAdapterWrapperProvider,
      Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
          bleAdapterStateObservableProvider,
      Provider<Observable<Boolean>> locationServicesOkObservableProvider,
      Provider<LocationServicesStatus> locationServicesStatusProvider,
      Provider<Scheduler> timerSchedulerProvider) {
    return new ClientStateObservable_Factory(
        rxBleAdapterWrapperProvider,
        bleAdapterStateObservableProvider,
        locationServicesOkObservableProvider,
        locationServicesStatusProvider,
        timerSchedulerProvider);
  }

  public static ClientStateObservable newClientStateObservable(
      RxBleAdapterWrapper rxBleAdapterWrapper,
      Observable<RxBleAdapterStateObservable.BleAdapterState> bleAdapterStateObservable,
      Observable<Boolean> locationServicesOkObservable,
      LocationServicesStatus locationServicesStatus,
      Scheduler timerScheduler) {
    return new ClientStateObservable(
        rxBleAdapterWrapper,
        bleAdapterStateObservable,
        locationServicesOkObservable,
        locationServicesStatus,
        timerScheduler);
  }
}
