// Generated by Dagger (https://google.github.io/dagger).
package com.polidea.rxandroidble.internal.operations;

import android.bluetooth.BluetoothGatt;
import bleshadow.dagger.internal.Factory;
import bleshadow.javax.inject.Provider;
import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
import com.polidea.rxandroidble.internal.util.RxBleServicesLogger;
import rx.Scheduler;

public final class OperationsProviderImpl_Factory implements Factory<OperationsProviderImpl> {
  private final Provider<RxBleGattCallback> rxBleGattCallbackProvider;

  private final Provider<BluetoothGatt> bluetoothGattProvider;

  private final Provider<RxBleServicesLogger> bleServicesLoggerProvider;

  private final Provider<TimeoutConfiguration> timeoutConfigurationProvider;

  private final Provider<Scheduler> bluetoothInteractionSchedulerProvider;

  private final Provider<Scheduler> timeoutSchedulerProvider;

  private final Provider<ReadRssiOperation> rssiReadOperationProvider;

  public OperationsProviderImpl_Factory(
      Provider<RxBleGattCallback> rxBleGattCallbackProvider,
      Provider<BluetoothGatt> bluetoothGattProvider,
      Provider<RxBleServicesLogger> bleServicesLoggerProvider,
      Provider<TimeoutConfiguration> timeoutConfigurationProvider,
      Provider<Scheduler> bluetoothInteractionSchedulerProvider,
      Provider<Scheduler> timeoutSchedulerProvider,
      Provider<ReadRssiOperation> rssiReadOperationProvider) {
    this.rxBleGattCallbackProvider = rxBleGattCallbackProvider;
    this.bluetoothGattProvider = bluetoothGattProvider;
    this.bleServicesLoggerProvider = bleServicesLoggerProvider;
    this.timeoutConfigurationProvider = timeoutConfigurationProvider;
    this.bluetoothInteractionSchedulerProvider = bluetoothInteractionSchedulerProvider;
    this.timeoutSchedulerProvider = timeoutSchedulerProvider;
    this.rssiReadOperationProvider = rssiReadOperationProvider;
  }

  @Override
  public OperationsProviderImpl get() {
    return new OperationsProviderImpl(
        rxBleGattCallbackProvider.get(),
        bluetoothGattProvider.get(),
        bleServicesLoggerProvider.get(),
        timeoutConfigurationProvider.get(),
        bluetoothInteractionSchedulerProvider.get(),
        timeoutSchedulerProvider.get(),
        rssiReadOperationProvider);
  }

  public static OperationsProviderImpl_Factory create(
      Provider<RxBleGattCallback> rxBleGattCallbackProvider,
      Provider<BluetoothGatt> bluetoothGattProvider,
      Provider<RxBleServicesLogger> bleServicesLoggerProvider,
      Provider<TimeoutConfiguration> timeoutConfigurationProvider,
      Provider<Scheduler> bluetoothInteractionSchedulerProvider,
      Provider<Scheduler> timeoutSchedulerProvider,
      Provider<ReadRssiOperation> rssiReadOperationProvider) {
    return new OperationsProviderImpl_Factory(
        rxBleGattCallbackProvider,
        bluetoothGattProvider,
        bleServicesLoggerProvider,
        timeoutConfigurationProvider,
        bluetoothInteractionSchedulerProvider,
        timeoutSchedulerProvider,
        rssiReadOperationProvider);
  }

  public static OperationsProviderImpl newOperationsProviderImpl(
      RxBleGattCallback rxBleGattCallback,
      BluetoothGatt bluetoothGatt,
      RxBleServicesLogger bleServicesLogger,
      TimeoutConfiguration timeoutConfiguration,
      Scheduler bluetoothInteractionScheduler,
      Scheduler timeoutScheduler,
      Provider<ReadRssiOperation> rssiReadOperationProvider) {
    return new OperationsProviderImpl(
        rxBleGattCallback,
        bluetoothGatt,
        bleServicesLogger,
        timeoutConfiguration,
        bluetoothInteractionScheduler,
        timeoutScheduler,
        rssiReadOperationProvider);
  }
}
