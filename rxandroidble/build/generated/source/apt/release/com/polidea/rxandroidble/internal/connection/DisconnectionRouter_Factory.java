// Generated by Dagger (https://google.github.io/dagger).
package com.polidea.rxandroidble.internal.connection;

import bleshadow.dagger.internal.Factory;
import bleshadow.javax.inject.Provider;
import com.polidea.rxandroidble.RxBleAdapterStateObservable;
import com.polidea.rxandroidble.internal.util.RxBleAdapterWrapper;
import rx.Observable;

public final class DisconnectionRouter_Factory implements Factory<DisconnectionRouter> {
  private final Provider<String> macAddressProvider;

  private final Provider<RxBleAdapterWrapper> adapterWrapperProvider;

  private final Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
      adapterStateObservableProvider;

  public DisconnectionRouter_Factory(
      Provider<String> macAddressProvider,
      Provider<RxBleAdapterWrapper> adapterWrapperProvider,
      Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
          adapterStateObservableProvider) {
    this.macAddressProvider = macAddressProvider;
    this.adapterWrapperProvider = adapterWrapperProvider;
    this.adapterStateObservableProvider = adapterStateObservableProvider;
  }

  @Override
  public DisconnectionRouter get() {
    return new DisconnectionRouter(
        macAddressProvider.get(),
        adapterWrapperProvider.get(),
        adapterStateObservableProvider.get());
  }

  public static DisconnectionRouter_Factory create(
      Provider<String> macAddressProvider,
      Provider<RxBleAdapterWrapper> adapterWrapperProvider,
      Provider<Observable<RxBleAdapterStateObservable.BleAdapterState>>
          adapterStateObservableProvider) {
    return new DisconnectionRouter_Factory(
        macAddressProvider, adapterWrapperProvider, adapterStateObservableProvider);
  }

  public static DisconnectionRouter newDisconnectionRouter(
      String macAddress,
      RxBleAdapterWrapper adapterWrapper,
      Observable<RxBleAdapterStateObservable.BleAdapterState> adapterStateObservable) {
    return new DisconnectionRouter(macAddress, adapterWrapper, adapterStateObservable);
  }
}
